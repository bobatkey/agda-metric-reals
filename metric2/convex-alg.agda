module metric2.convex-alg where

open import Data.Product using (_,_)

open import Data.Rational.Unnormalised as ‚Ñö using () renaming (‚Ñö·µò to ‚Ñö; 0‚Ñö·µò to 0‚Ñö; 1‚Ñö·µò to 1‚Ñö)
open import metric2.base

import upper-reals
open import qpos as ‚Ñö‚Å∫ using (‚Ñö‚Å∫; 1‚Ñö‚Å∫)

open MSpc

record ‚Ñö‚ü®0,1‚ü© : Set where
  field
    rational : ‚Ñö‚Å∫
    upper    : rational ‚Ñö‚Å∫.< 1‚Ñö‚Å∫
open ‚Ñö‚ü®0,1‚ü©

data _‚âÉ_ : ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü© ‚Üí Set where
  *‚âÉ* : ‚àÄ {q r} ‚Üí q .rational ‚Ñö‚Å∫.‚âÉ r .rational ‚Üí q ‚âÉ r

_*_ : ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü©
(q * r) .rational = q .rational ‚Ñö‚Å∫.* r .rational
(q * r) .upper = begin-strict
                   q .rational ‚Ñö‚Å∫.* r .rational
                     <‚ü® ‚Ñö‚Å∫.*-mono-< (q .upper) (r .upper) ‚ü©
                   1‚Ñö‚Å∫ ‚Ñö‚Å∫.* 1‚Ñö‚Å∫
                     ‚âà‚ü® ‚Ñö‚Å∫.*-identity ≥ 1‚Ñö‚Å∫ ‚ü©
                   1‚Ñö‚Å∫
                 ‚àé
  where open ‚Ñö‚Å∫.‚â§-Reasoning

1-_ : ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü©
1- q = {!!}

_/_ : ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü©
(q / r) .rational = q .rational ‚Ñö‚Å∫.* (‚Ñö‚Å∫.1/ r .rational)
(q / r) .upper = {!!}

module _ (X : MSpc) where

  data term : Set where
    Œ∑     : X .Carrier ‚Üí term
    split : term ‚Üí ‚Ñö‚ü®0,1‚ü© ‚Üí term ‚Üí term

  data within : term ‚Üí ‚Ñö‚Å∫ ‚Üí term ‚Üí Set where
    tm-wk    : ‚àÄ {s t Œµ‚ÇÅ Œµ‚ÇÇ} ‚Üí Œµ‚ÇÅ ‚Ñö‚Å∫.‚â§ Œµ‚ÇÇ ‚Üí within s Œµ‚ÇÅ t ‚Üí within s Œµ‚ÇÇ t
    tm-refl  : ‚àÄ {t Œµ} ‚Üí within t Œµ t
    tm-sym   : ‚àÄ {s t Œµ} ‚Üí within s Œµ t ‚Üí within t Œµ s
    tm-trans : ‚àÄ {s t u Œµ‚ÇÅ Œµ‚ÇÇ} ‚Üí within s Œµ‚ÇÅ t ‚Üí within t Œµ‚ÇÇ u ‚Üí within s (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) u
    tm-arch  : ‚àÄ {s t Œµ} ‚Üí (‚àÄ Œ¥ ‚Üí within s (Œµ ‚Ñö‚Å∫.+ Œ¥) t) ‚Üí within s Œµ t
    tm-var   : ‚àÄ {x y Œµ} ‚Üí X .dist x y upper-reals.‚â§ upper-reals.rational+ Œµ ‚Üí within (Œ∑ x) Œµ (Œ∑ y)
    tm-idem  : ‚àÄ {t q Œµ} ‚Üí within (split t q t) Œµ t
    tm-assoc : ‚àÄ {s t u q‚ÇÅ q‚ÇÇ q‚ÇÅ' q‚ÇÇ' Œµ} ‚Üí
                 q‚ÇÅ' ‚âÉ (q‚ÇÅ * q‚ÇÇ) ‚Üí
                 q‚ÇÇ' ‚âÉ ((q‚ÇÅ * (1- q‚ÇÇ)) / (1- (q‚ÇÅ * q‚ÇÇ))) ‚Üí
                 within (split (split s q‚ÇÅ t) q‚ÇÇ u)
                        Œµ
                        (split s q‚ÇÅ' (split t q‚ÇÇ' u))
    tm-dist  : ‚àÄ {s‚ÇÅ s‚ÇÇ t‚ÇÅ t‚ÇÇ Œµ‚ÇÅ Œµ‚ÇÇ Œµ q} ‚Üí
                 within s‚ÇÅ Œµ‚ÇÅ t‚ÇÅ ‚Üí
                 within s‚ÇÇ Œµ‚ÇÇ t‚ÇÇ ‚Üí
                 Œµ ‚Ñö‚Å∫.‚âÉ Œµ‚ÇÅ ‚Ñö‚Å∫.* q .rational ‚Ñö‚Å∫.+ Œµ‚ÇÇ ‚Ñö‚Å∫.* (1- q) .rational ‚Üí
                 within (split s‚ÇÅ q s‚ÇÇ) Œµ (split t‚ÇÅ q t‚ÇÇ)
    -- FIXME: also add tm-comm ???

  open upper-reals.‚Ñù·µò

  -- a metric space!
  ùïã : MSpc
  ùïã .Carrier = term
  ùïã .dist s t .contains Œµ = within s Œµ t
  ùïã .dist s t .upper = tm-wk
  ùïã .dist s t .closed = tm-arch
  ùïã .refl = record { *‚â§* = Œª _ ‚Üí tm-refl }
  ùïã .sym = record { *‚â§* = Œª {Œµ} y-Œµ-x ‚Üí tm-sym y-Œµ-x }
  ùïã .triangle = record { *‚â§* = Œª {Œµ} xy-yz ‚Üí tm-arch (Œª Œ¥ ‚Üí let Œµ‚ÇÅ , Œµ‚ÇÇ , Œµ‚ÇÅ+Œµ‚ÇÇ‚â§Œµ+s , p , q = xy-yz Œ¥ in
                                                              tm-wk Œµ‚ÇÅ+Œµ‚ÇÇ‚â§Œµ+s (tm-trans p q)) }

open _‚áí_

-- Messy!
unit : ‚àÄ {X} ‚Üí X ‚áí ùïã X
unit .fun x = Œ∑ x
unit {X} .non-expansive {a}{b} =
  record { *‚â§* = Œª x ‚Üí tm-var (record { *‚â§* = Œª x‚ÇÅ ‚Üí X .dist a b .upper-reals.‚Ñù·µò.upper (‚Ñö‚Å∫.r‚â§r x‚ÇÅ) x }) }

-- FIXME: join

-- FIXME: map

-- FIXME: monoidal

{-
-- Integration is definable for any ùïã-algebra?



sum : term ‚Ñöspc ‚Üí ‚Ñöspc .Carrier
sum t = ?

sum-ne : ‚àÄ {Œµ s t} ‚Üí within s Œµ t ‚Üí abs (sum s ‚Ñö.- sum t) ‚Ñö.‚â§ fog Œµ
-}

  -- axioms:
  -- 1. split x 0 y ‚â°[ Œµ ] x -- get rid of this if q ‚àà ‚Ñö‚ü®0,1‚ü©
  -- 2. split x q x ‚â°[ Œµ ] x
  -- 3. split x q y ‚â°[ Œµ ] split y (1 - q) x -- could be removed if the focus is on step functions
  -- 4. split (split x q y) q' z ‚â°[ Œµ ] split x (q*q') (split y ((q - q*q')/(1 - q*q')) z)   -- as long as q, q' ‚àà (0,1)
  -- 5. x‚ÇÅ ‚â°[ Œµ ] x‚ÇÇ ‚Üí y‚ÇÅ ‚â°[ Œµ' ] y‚ÇÇ ‚Üí split x‚ÇÅ q y‚ÇÅ ‚â°[ Œµ*q + (1 - q)*Œµ' ] split x‚ÇÅ q y‚ÇÇ

  -- This should then give an MSpc with a map (split : ‚Ñö[0,1] ‚Üí term X √ó‚Çò term X ‚áí term X)

  -- Goal: to prove that there is a non-expansive function
  --
  --      sum : term ‚Ñùspc ‚Üí ‚Ñùspc    (or ‚Ñöspc? or any normed ‚Ñö-vector space?)
  --
  -- It should also be possible to create an identity element of `ùíû (term ‚Ñöspc)` (or ùíû (term ‚Ñùspc))
  --
  -- Then integration is ‚à´ : (‚Ñù ‚áí ‚Ñù) ‚Üí ‚Ñù = Œª f ‚Üí join (ùíû-map (sum ‚àò term-map f) identity)

  -- this ought to work for any normed ‚Ñö‚ü®0,1‚ü©-vector space that has been completed: anything that we can define 'sum' for.

    -- ùíû-map (term-map f) identity : ùíû (term ‚Ñùspc)
    -- ùíû-map (sum ‚àò term-map f) identity : ùíû ‚Ñùspc
    -- join (ùíû-map (sum ‚àò term-map f) identity) : ‚Ñùspc

  -- then any element of `ùíû (term X)` can be used for the "measure"

  -- ùí´ X = ùíû (term X)   -- monad of probability measures; need term and ùíû to distribute

  -- if ùíû and term are strong monads, then this is a higher order function ùí´ X ‚äó (X ‚ä∏ ùïç) ‚ä∏ ùïç
  -- where X is any metic space
  --   and ùïç is any normed ‚Ñö-vector space (or convex set??) that is complete

  -- for step functions:
  --   eval : term X ‚äó ‚Ñö‚ü®0,1‚ü© ‚áí X
  -- presuambly for step functions, the result of the integration needn't be a commutative module


  -- IDEA: what if we combine 'term' and the free œâCPO monad? do we
  -- get recursion + metric reasoning? Probably need some rules to
  -- combine the order with the metric. See the POPL paper by those
  -- people.
