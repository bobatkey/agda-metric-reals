module metric2.completion where

open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; swap)
import qpos as ‚Ñö‚Å∫
open ‚Ñö‚Å∫ using (‚Ñö‚Å∫; _/2)
open import metric2.base
open import upper-reals

open MSpc
open _‚áí_
open _‚âàf_

record RegFun (X : MSpc) : Set where
  field
    rfun    : ‚Ñö‚Å∫ ‚Üí X .Carrier
    regular : ‚àÄ Œµ‚ÇÅ Œµ‚ÇÇ ‚Üí X .dist (rfun Œµ‚ÇÅ) (rfun Œµ‚ÇÇ) ‚â§ rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
open RegFun

reg-dist : ‚àÄ {X} ‚Üí RegFun X ‚Üí RegFun X ‚Üí ‚Ñù·µò
reg-dist {X} x y = sup (‚Ñö‚Å∫ √ó ‚Ñö‚Å∫) (Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí X .dist (x .rfun Œµ‚ÇÅ) (y .rfun Œµ‚ÇÇ) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) } )

-- FIXME: some lemmas for dealing with reg-dist, to avoid all the
-- deadling with sup-least and ‚äñ-iso1/2 below

ùíû : MSpc ‚Üí MSpc
ùíû X .Carrier = RegFun X
ùíû X .dist = reg-dist
ùíû X .refl {x} = sup-least Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí ‚â§-trans (‚äñ-mono (x .regular Œµ‚ÇÅ Œµ‚ÇÇ) ‚Ñö‚Å∫.‚â§-refl) (‚äñ-0 (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)) }
ùíû X .sym = sup-mono-‚â§ swap Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí ‚äñ-mono (X .sym) (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫.+-comm Œµ‚ÇÇ Œµ‚ÇÅ)) }
ùíû X .triangle {x}{y}{z} =
  sup-least Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí closedness Œª Œµ ‚Üí
                  begin
                     (X .dist (x .rfun Œµ‚ÇÅ) (z .rfun Œµ‚ÇÇ) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)) ‚äñ Œµ
                       ‚â§‚ü® ‚äñ-mono (‚äñ-mono (X .triangle) ‚Ñö‚Å∫.‚â§-refl) (‚Ñö‚Å∫.‚â§-reflexive ‚Ñö‚Å∫.half+half) ‚ü©
                     ((X .dist (x .rfun Œµ‚ÇÅ) (y .rfun (Œµ /2)) + X .dist (y .rfun (Œµ /2)) (z .rfun Œµ‚ÇÇ)) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)) ‚äñ (Œµ /2 ‚Ñö‚Å∫.+ Œµ /2)
                       ‚âà‚ü® ‚äñ-+ ‚ü©
                     ((X .dist (x .rfun Œµ‚ÇÅ) (y .rfun (Œµ /2)) + X .dist (y .rfun (Œµ /2)) (z .rfun Œµ‚ÇÇ)) ‚äñ ((Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) ‚Ñö‚Å∫.+ (Œµ /2 ‚Ñö‚Å∫.+ Œµ /2)))
                       ‚â§‚ü® ‚äñ-mono ‚â§-refl (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫-interchange Œµ‚ÇÅ _ _ _)) ‚ü©
                     ((X .dist (x .rfun Œµ‚ÇÅ) (y .rfun (Œµ /2)) + X .dist (y .rfun (Œµ /2)) (z .rfun Œµ‚ÇÇ)) ‚äñ ((Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÇ ‚Ñö‚Å∫.+ Œµ /2)))
                       ‚â§‚ü® ‚äñ-mono ‚â§-refl (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫.+-cong ≥ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ /2) (‚Ñö‚Å∫.+-comm _ _))) ‚ü©
                     ((X .dist (x .rfun Œµ‚ÇÅ) (y .rfun (Œµ /2)) + X .dist (y .rfun (Œµ /2)) (z .rfun Œµ‚ÇÇ)) ‚äñ ((Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ /2) ‚Ñö‚Å∫.+ (Œµ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ)))
                       ‚â§‚ü® ‚äñ-+-+ ‚ü©
                     (X .dist (x .rfun Œµ‚ÇÅ) (y .rfun (Œµ /2)) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ /2)) + (X .dist (y .rfun (Œµ /2)) (z .rfun Œµ‚ÇÇ) ‚äñ (Œµ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ))
                       ‚â§‚ü® +-mono-‚â§ (sup-upper (Œµ‚ÇÅ , Œµ /2)) (sup-upper (Œµ /2 , Œµ‚ÇÇ)) ‚ü©
                     reg-dist x y + reg-dist y z
                   ‚àé
              }
   where open ‚â§-Reasoning

------------------------------------------------------------------------------
-- Functor operation on morphisms

-- FIXME: does this also work for uniformly continuous functions?
map : ‚àÄ {X Y} ‚Üí X ‚áí Y ‚Üí ùíû X ‚áí ùíû Y
map f .fun x .rfun Œµ = f .fun (x .rfun Œµ)
map f .fun x .regular Œµ‚ÇÅ Œµ‚ÇÇ = ‚â§-trans (f .non-expansive) (x .regular Œµ‚ÇÅ Œµ‚ÇÇ)
map f .non-expansive = sup-mono-‚â§ (Œª x ‚Üí x) Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí ‚äñ-mono (f .non-expansive) ‚Ñö‚Å∫.‚â§-refl }

map-cong : ‚àÄ {X Y}{f‚ÇÅ f‚ÇÇ : X ‚áí Y} ‚Üí f‚ÇÅ ‚âàf f‚ÇÇ ‚Üí map f‚ÇÅ ‚âàf map f‚ÇÇ
map-cong {X}{Y}{f‚ÇÅ}{f‚ÇÇ} f‚ÇÅ‚âàf‚ÇÇ .f‚âàf x =
   sup-least Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí
                   begin
                      Y .dist (f‚ÇÅ .fun (x .rfun Œµ‚ÇÅ)) (f‚ÇÇ .fun (x .rfun Œµ‚ÇÇ)) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
                        ‚â§‚ü® ‚äñ-mono (Y .triangle) ‚Ñö‚Å∫.‚â§-refl ‚ü©
                      (Y .dist (f‚ÇÅ .fun (x .rfun Œµ‚ÇÅ)) (f‚ÇÅ .fun (x .rfun Œµ‚ÇÇ)) + Y .dist (f‚ÇÅ .fun (x .rfun Œµ‚ÇÇ)) (f‚ÇÇ .fun (x .rfun Œµ‚ÇÇ))) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
                        ‚â§‚ü® ‚äñ-mono (+-mono-‚â§ (f‚ÇÅ .non-expansive) (f‚ÇÅ‚âàf‚ÇÇ .f‚âàf _)) ‚Ñö‚Å∫.‚â§-refl ‚ü©
                      (X .dist (x .rfun Œµ‚ÇÅ) (x .rfun Œµ‚ÇÇ) + 0‚Ñù) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
                        ‚â§‚ü® ‚äñ-mono (+-mono-‚â§ (x .regular Œµ‚ÇÅ Œµ‚ÇÇ) ‚â§-refl)  ‚Ñö‚Å∫.‚â§-refl ‚ü©
                      (rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) + 0‚Ñù) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
                        ‚â§‚ü® ‚äñ-mono (‚â§-reflexive (+-identity ≥ _)) ‚Ñö‚Å∫.‚â§-refl ‚ü©
                      rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
                        ‚â§‚ü® ‚äñ-0 _ ‚ü©
                      0‚Ñù
                   ‚àé }
   where open ‚â§-Reasoning

open metric2.base.category

map-id : ‚àÄ {X} ‚Üí map {X} id ‚âàf id
map-id {X} .f‚âàf x = ùíû X .refl {x}

map-‚àò : ‚àÄ {X Y Z} {f : Y ‚áí Z} {g : X ‚áí Y} ‚Üí
       map (f ‚àò g) ‚âàf (map f ‚àò map g)
map-‚àò {Z = Z}{f}{g} .f‚âàf a = ùíû Z .refl {map f .fun (map g .fun a)}

------------------------------------------------------------------------------
unit : ‚àÄ {X} ‚Üí X ‚áí ùíû X
unit {X} .fun x .rfun _ = x
unit {X} .fun x .regular Œµ‚ÇÅ Œµ‚ÇÇ = ‚â§-trans (X .refl) (0-least _)
unit {X} .non-expansive {x}{y} =
   sup-least Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí
                   begin
                      X .dist x y ‚äñ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
                        ‚â§‚ü® ‚äñ-‚â§ ‚ü©
                      X .dist x y
                   ‚àé }
   where open ‚â§-Reasoning

unit-natural : ‚àÄ {X Y}{f : X ‚áí Y} ‚Üí
               (unit ‚àò f) ‚âàf (map f ‚àò unit)
unit-natural {X}{Y}{f} .f‚âàf x = (ùíû Y) .refl {unit .fun (f .fun x)}

------------------------------------------------------------------------------
join : ‚àÄ {X} ‚Üí ùíû (ùíû X) ‚áí ùíû X
join {X} .fun x .rfun Œµ = x .rfun (Œµ /2) .rfun (Œµ /2)
join {X} .fun x .regular Œµ‚ÇÅ Œµ‚ÇÇ =
   begin
     X .dist (x .rfun (Œµ‚ÇÅ /2) .rfun (Œµ‚ÇÅ /2)) (x .rfun (Œµ‚ÇÇ /2) .rfun (Œµ‚ÇÇ /2))
       ‚â§‚ü® ‚äñ-iso1 (‚â§-trans (sup-upper (Œµ‚ÇÅ /2 , Œµ‚ÇÇ /2)) (x .regular (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2))) ‚ü©
     rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) + rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)
       ‚âà‚ü® rational-+ {Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2} {Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2} ‚ü©
     rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
       ‚â§‚ü® rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫-interchange (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2) (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2)))) ‚ü©
     rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÅ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
       ‚â§‚ü® rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫.+-cong (‚Ñö‚Å∫.half+half {Œµ‚ÇÅ}) (‚Ñö‚Å∫.half+half {Œµ‚ÇÇ})))) ‚ü©
     rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
   ‚àé
   where open ‚â§-Reasoning
join {X} .non-expansive {a}{b} ._‚â§_.*‚â§* {q} a-b (Œµ‚ÇÅ , Œµ‚ÇÇ) =
  -- FIXME: find an abstract proof using the interface of ‚Ñù·µò
  X .dist (a .rfun (Œµ‚ÇÅ /2) .rfun (Œµ‚ÇÅ /2)) (b .rfun (Œµ‚ÇÇ /2) .rfun (Œµ‚ÇÇ /2)) .‚Ñù·µò.upper
    (begin
      q ‚Ñö‚Å∫.+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)
        ‚âà‚ü® ‚Ñö‚Å∫.+-assoc q _ _ ‚ü©
      q ‚Ñö‚Å∫.+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
        ‚âà‚ü® ‚Ñö‚Å∫.+-cong ≥ q (‚Ñö‚Å∫-interchange (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2) (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2)) ‚ü©
      q ‚Ñö‚Å∫.+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÅ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
        ‚âà‚ü® ‚Ñö‚Å∫.+-cong ≥ q (‚Ñö‚Å∫.+-cong ‚Ñö‚Å∫.half+half ‚Ñö‚Å∫.half+half) ‚ü©
      q ‚Ñö‚Å∫.+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
    ‚àé)
    (a-b (Œµ‚ÇÅ /2 , Œµ‚ÇÇ /2) (Œµ‚ÇÅ /2 , Œµ‚ÇÇ /2))
  where open ‚Ñö‚Å∫.‚â§-Reasoning

join-natural : ‚àÄ {X Y}{f : X ‚áí Y} ‚Üí
               (join ‚àò map (map f)) ‚âàf (map f ‚àò join)
join-natural {X}{Y}{f} .f‚âàf x = ùíû Y .refl {map f .fun (join .fun x)}

join-unit : ‚àÄ {X} ‚Üí (join ‚àò unit) ‚âàf id {ùíû X}
join-unit .f‚âàf a =
  sup-least (Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí
   ‚â§-trans (‚äñ-mono (a .regular (Œµ‚ÇÅ /2) Œµ‚ÇÇ) ‚Ñö‚Å∫.‚â§-refl)
           (‚äñ-iso2 (‚â§-trans (rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.+-mono-‚â§ (‚Ñö‚Å∫.half-‚â§ Œµ‚ÇÅ) (‚Ñö‚Å∫.‚â§-refl {Œµ‚ÇÇ}))))
                            (‚â§-reflexive (‚âÉ-sym (+-identityÀ° (rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ))))))) })

join-mapunit : ‚àÄ {X} ‚Üí (join ‚àò map unit) ‚âàf id {ùíû X}
join-mapunit .f‚âàf a = join-unit .f‚âàf a

join-join : ‚àÄ {X} ‚Üí (join ‚àò map join) ‚âàf (join ‚àò join {ùíû X})
join-join .f‚âàf x =
  sup-least Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí
     ‚äñ-iso2 (‚â§-trans (‚äñ-iso1 (‚â§-trans (sup-upper (Œµ‚ÇÅ /2 /2 , Œµ‚ÇÇ /2)) (‚äñ-iso1 (‚â§-trans (sup-upper (Œµ‚ÇÅ /2 /2 , Œµ‚ÇÇ /2 /2)) (x .regular (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2 /2))))))
                     (eq Œµ‚ÇÅ Œµ‚ÇÇ)) }
  where
    open ‚â§-Reasoning
    open import CommutativeSemigroupSolver (‚Ñö‚Å∫.+-commutativeSemigroup)
    a = v# 0; b = v# 1; c = v# 2; d = v# 3
    eq : ‚àÄ Œµ‚ÇÅ Œµ‚ÇÇ ‚Üí ((rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2) + rational+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2)) + rational+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)) ‚â§ (0‚Ñù + rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ))
    eq Œµ‚ÇÅ Œµ‚ÇÇ =
      begin
        (rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2) + rational+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2)) + rational+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)
           ‚âà‚ü® +-cong (rational-+ {Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2} {(Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2}) ‚âÉ-refl ‚ü©
        rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2) ‚Ñö‚Å∫.+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2)) + rational+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)
           ‚âà‚ü® rational-+ {(Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2) ‚Ñö‚Å∫.+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2)} {(Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2} ‚ü©
        rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2) ‚Ñö‚Å∫.+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2) /2) ‚Ñö‚Å∫.+ ((Œµ‚ÇÅ /2) /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
           ‚âà‚ü® rational-cong (‚Ñö‚Å∫.fog-cong (prove 4 (((a ‚äï b) ‚äï (c ‚äï b)) ‚äï (c ‚äï d)) ((a ‚äï (c ‚äï c)) ‚äï (d ‚äï (b ‚äï b))) (Œµ‚ÇÅ /2 ‚à∑ Œµ‚ÇÇ /2 /2 ‚à∑ Œµ‚ÇÅ /2 /2 ‚à∑ Œµ‚ÇÇ /2 ‚à∑ []))) ‚ü©
        rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÅ /2 /2 ‚Ñö‚Å∫.+ Œµ‚ÇÅ /2 /2)) ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2 ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2 /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2 /2)))
           ‚âà‚ü® rational-cong (‚Ñö‚Å∫.fog-cong (‚Ñö‚Å∫.+-cong (‚Ñö‚Å∫.+-cong ≥ (Œµ‚ÇÅ /2) (‚Ñö‚Å∫.half+half {Œµ‚ÇÅ /2})) (‚Ñö‚Å∫.+-cong ≥ (Œµ‚ÇÇ /2) (‚Ñö‚Å∫.half+half {Œµ‚ÇÇ /2})))) ‚ü©
        rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÅ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
           ‚âà‚ü® rational-cong (‚Ñö‚Å∫.fog-cong (‚Ñö‚Å∫.+-cong (‚Ñö‚Å∫.half+half {Œµ‚ÇÅ}) (‚Ñö‚Å∫.half+half {Œµ‚ÇÇ}))) ‚ü©
        rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
           ‚âà‚ü® ‚âÉ-sym (+-identityÀ° (rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ))) ‚ü©
        0‚Ñù + rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
      ‚àé

------------------------------------------------------------------------------
-- Idempotency
--
--  This shows that    join : ùíû (ùíû X) ‚âÖ ùíû X : unit

unit-join : ‚àÄ {X} ‚Üí (unit ‚àò join) ‚âàf id {ùíû (ùíû X)}
unit-join .f‚âàf x =
  sup-least Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí
     ‚äñ-iso2 (sup-least Œª { (Œµ‚ÇÅ' , Œµ‚ÇÇ') ‚Üí
        ‚äñ-iso2 (‚â§-trans (‚äñ-iso1 (‚â§-trans (sup-upper (Œµ‚ÇÅ' /2 , Œµ‚ÇÇ')) (x .regular (Œµ‚ÇÅ' /2) Œµ‚ÇÇ))) (ineq Œµ‚ÇÅ Œµ‚ÇÇ Œµ‚ÇÅ' Œµ‚ÇÇ')) }) }
  where
    open ‚â§-Reasoning
    open import CommutativeSemigroupSolver (‚Ñö‚Å∫.+-commutativeSemigroup)
    a = v# 0; b = v# 1; c = v# 2; d = v# 3
    ineq : ‚àÄ Œµ‚ÇÅ Œµ‚ÇÇ Œµ‚ÇÅ' Œµ‚ÇÇ' ‚Üí (rational+ (Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ) + rational+ (Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ')) ‚â§ ((0‚Ñù + rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)) + rational+ (Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ'))
    ineq Œµ‚ÇÅ Œµ‚ÇÇ Œµ‚ÇÅ' Œµ‚ÇÇ' =
      begin
        rational+ (Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ) + rational+ (Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ')
          ‚âà‚ü® rational-+ {Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ} {Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ'} ‚ü©
        rational+ ((Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ'))
          ‚âà‚ü® rational-cong (‚Ñö‚Å∫.fog-cong (prove 3 ((a ‚äï b) ‚äï (a ‚äï c)) (b ‚äï ((a ‚äï a) ‚äï c)) (Œµ‚ÇÅ' /2 ‚à∑ Œµ‚ÇÇ ‚à∑ Œµ‚ÇÇ' ‚à∑ []))) ‚ü©
        rational+ (Œµ‚ÇÇ ‚Ñö‚Å∫.+ ((Œµ‚ÇÅ' /2 ‚Ñö‚Å∫.+ Œµ‚ÇÅ' /2) ‚Ñö‚Å∫.+ Œµ‚ÇÇ'))
          ‚âà‚ü® rational-cong (‚Ñö‚Å∫.fog-cong (‚Ñö‚Å∫.+-cong ≥ Œµ‚ÇÇ (‚Ñö‚Å∫.+-congÀ° Œµ‚ÇÇ' (‚Ñö‚Å∫.half+half {Œµ‚ÇÅ'}))))  ‚ü©
        rational+ (Œµ‚ÇÇ ‚Ñö‚Å∫.+ (Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ'))
          ‚â§‚ü® rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.+-mono-‚â§ (‚Ñö‚Å∫.+-increasing {Œµ‚ÇÇ} {Œµ‚ÇÅ}) (‚Ñö‚Å∫.‚â§-refl {Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ'}))) ‚ü©
        rational+ ((Œµ‚ÇÇ ‚Ñö‚Å∫.+ Œµ‚ÇÅ) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ'))
          ‚âà‚ü® rational-cong (‚Ñö‚Å∫.fog-cong (‚Ñö‚Å∫.+-congÀ° (Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ') (‚Ñö‚Å∫.+-comm Œµ‚ÇÇ Œµ‚ÇÅ))) ‚ü©
        rational+ ((Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ'))
          ‚âà‚ü® ‚âÉ-sym (rational-+ {Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ} {Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ'}) ‚ü©
        rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) + rational+ (Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ')
          ‚âà‚ü® +-cong (‚âÉ-sym (+-identityÀ° (rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)))) ‚âÉ-refl ‚ü©
        (0‚Ñù + rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)) + rational+ (Œµ‚ÇÅ' ‚Ñö‚Å∫.+ Œµ‚ÇÇ')
      ‚àé

------------------------------------------------------------------------------
-- This is a monoidal monad, with respect to the monoidal product

open import metric2.monoidal

-- FIXME: the inverse as well

monoidal-‚äó : ‚àÄ {X Y} ‚Üí (ùíû X ‚äó ùíû Y) ‚áí ùíû (X ‚äó Y)
monoidal-‚äó .fun (x , y) .rfun Œµ = x .rfun (Œµ /2) , y .rfun (Œµ /2)
monoidal-‚äó {X}{Y} .fun (x , y) .regular Œµ‚ÇÅ Œµ‚ÇÇ =
  begin
    (X .dist (x .rfun (Œµ‚ÇÅ /2)) (x .rfun (Œµ‚ÇÇ /2)) + Y .dist (y .rfun (Œµ‚ÇÅ /2)) (y .rfun (Œµ‚ÇÇ /2)))
      ‚â§‚ü® +-mono-‚â§ (x .regular (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2)) (y .regular (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2)) ‚ü©
    rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) + rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)
      ‚âà‚ü® rational-+ {Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2} {Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2} ‚ü©
    rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
      ‚â§‚ü® rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫-interchange (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2) (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2)))) ‚ü©
    rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÅ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
      ‚â§‚ü® rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫.+-cong (‚Ñö‚Å∫.half+half {Œµ‚ÇÅ}) (‚Ñö‚Å∫.half+half {Œµ‚ÇÇ})))) ‚ü©
    rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
  ‚àé
  where open ‚â§-Reasoning
monoidal-‚äó {X}{Y} .non-expansive {x‚ÇÅ , y‚ÇÅ} {x‚ÇÇ , y‚ÇÇ} =
  sup-least Œª { (Œµ‚ÇÅ , Œµ‚ÇÇ) ‚Üí ‚äñ-iso2
    (begin
      X .dist (x‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (x‚ÇÇ .rfun (Œµ‚ÇÇ /2)) + Y .dist (y‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (y‚ÇÇ .rfun (Œµ‚ÇÇ /2))
          ‚â§‚ü® +-mono-‚â§ ‚äñ-eval ‚äñ-eval ‚ü©
        ((X .dist (x‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (x‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)) + rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
      + ((Y .dist (y‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (y‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)) + rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
          ‚âà‚ü® interchange (X .dist (x‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (x‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)) (rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
                         (Y .dist (y‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (y‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)) (rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)) ‚ü©
     ( (X .dist (x‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (x‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
      + (Y .dist (y‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (y‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)))
      + (rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) + rational+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
          ‚âà‚ü® +-cong ‚âÉ-refl (rational-+ {Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2} {Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2}) ‚ü©
     ( (X .dist (x‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (x‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
      + (Y .dist (y‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (y‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)))
      + (rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)))
          ‚â§‚ü® +-mono-‚â§ ‚â§-refl (rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫-interchange (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2) (Œµ‚ÇÅ /2) (Œµ‚ÇÇ /2))))) ‚ü©
     ( (X .dist (x‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (x‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
      + (Y .dist (y‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (y‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)))
      + (rational+ ((Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÅ /2) ‚Ñö‚Å∫.+ (Œµ‚ÇÇ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2)))
          ‚â§‚ü® +-mono-‚â§ ‚â§-refl (rational-mono (‚Ñö‚Å∫.fog-mono (‚Ñö‚Å∫.‚â§-reflexive (‚Ñö‚Å∫.+-cong (‚Ñö‚Å∫.half+half {Œµ‚ÇÅ}) (‚Ñö‚Å∫.half+half {Œµ‚ÇÇ}))))) ‚ü©
      (  (X .dist (x‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (x‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))
       + (Y .dist (y‚ÇÅ .rfun (Œµ‚ÇÅ /2)) (y‚ÇÇ .rfun (Œµ‚ÇÇ /2)) ‚äñ (Œµ‚ÇÅ /2 ‚Ñö‚Å∫.+ Œµ‚ÇÇ /2))) + rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
          ‚â§‚ü® +-mono-‚â§ (+-mono-‚â§ (sup-upper (Œµ‚ÇÅ /2 , Œµ‚ÇÇ /2)) (sup-upper (Œµ‚ÇÅ /2 , Œµ‚ÇÇ /2))) ‚â§-refl ‚ü©
      (reg-dist x‚ÇÅ x‚ÇÇ + reg-dist y‚ÇÅ y‚ÇÇ) + rational+ (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ)
    ‚àé) }
  where open ‚â§-Reasoning

{-
monoidal-‚äó‚Åª¬π : ‚àÄ {X Y} ‚Üí ùíû (X ‚äó Y) ‚áí (ùíû X ‚äó ùíû Y)
monoidal-‚äó‚Åª¬π .fun x .proj‚ÇÅ .rfun Œµ = x .rfun Œµ .proj‚ÇÅ
monoidal-‚äó‚Åª¬π .fun x .proj‚ÇÅ .regular Œµ‚ÇÅ Œµ‚ÇÇ = {!!}
monoidal-‚äó‚Åª¬π .fun x .proj‚ÇÇ .rfun Œµ = x .rfun Œµ .proj‚ÇÇ
monoidal-‚äó‚Åª¬π .fun x .proj‚ÇÇ .regular Œµ‚ÇÅ Œµ‚ÇÇ = {!!}
monoidal-‚äó‚Åª¬π .non-expansive = {!!}
-}

-- FIXME:
-- 1. natural
-- 2. commutes with associativity
-- 3. commutes with symmetry
-- 4. commutes with join
-- 5. commutes with unit
