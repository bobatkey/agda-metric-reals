module MetricSpace.ConvexAlgebras where

open import Data.Product using (_,_; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ; _√ó_)
open import Data.Unit using (tt)
import Data.Real.UpperClosed as ‚Ñù·µò
import Data.Integer as ‚Ñ§
import Data.Nat as ‚Ñï
open import Data.Rational.Unnormalised as ‚Ñö using () renaming (‚Ñö·µò to ‚Ñö; 0‚Ñö·µò to 0‚Ñö; 1‚Ñö·µò to 1‚Ñö)
import Data.Rational.Unnormalised.Properties as ‚Ñö
open import MetricSpace

open import Data.Rational.Unnormalised.Positive as ‚Ñö‚Å∫ using (‚Ñö‚Å∫; 1‚Ñö‚Å∫)

open MSpc

record ‚Ñö‚ü®0,1‚ü© : Set where
  field
    num : ‚Ñö
    0<n : 0‚Ñö ‚Ñö.< num
    n<1 : num ‚Ñö.< 1‚Ñö
  pos : ‚Ñö‚Å∫
  pos = ‚Ñö‚Å∫.‚ü® num , ‚Ñö.positive 0<n ‚ü©
open ‚Ñö‚ü®0,1‚ü©

¬Ω : ‚Ñö‚ü®0,1‚ü©
¬Ω .num = ‚Ñö.¬Ω
¬Ω .0<n = ‚Ñö.*<* (‚Ñ§.+<+ (‚Ñï.s‚â§s ‚Ñï.z‚â§n))
¬Ω .n<1 = ‚Ñö.*<* (‚Ñ§.+<+ (‚Ñï.s‚â§s (‚Ñï.s‚â§s ‚Ñï.z‚â§n)))

record _‚âÉ_ (q r : ‚Ñö‚ü®0,1‚ü©) : Set where
  field
    n‚âÉn : q .num ‚Ñö.‚âÉ r .num

_*_ : ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü©
(q * r) .num = q .num ‚Ñö.* r .num
(q * r) .0<n =
  begin-strict
    0‚Ñö
  ‚âà‚ü® ‚Ñö.‚âÉ-sym (‚Ñö.*-zeroÀ° (r .num)) ‚ü©
    0‚Ñö ‚Ñö.* r .num
  <‚ü® ‚Ñö.*-monoÀ°-<-pos (‚Ñö.positive (r .0<n)) (q .0<n) ‚ü©
    q .num ‚Ñö.* r .num
  ‚àé
  where open ‚Ñö.‚â§-Reasoning
(q * r) .n<1 =
  begin-strict
    q .num ‚Ñö.* r .num
  <‚ü® ‚Ñö.*-monoÀ°-<-pos (‚Ñö.positive (r .0<n)) (q .n<1) ‚ü© -- ‚Ñö.*-monoÀ°-‚â§-nonNeg (‚Ñö.nonNegative (r .0‚â§n)) (q .n‚â§1) ‚ü©
    1‚Ñö ‚Ñö.* r .num
  <‚ü® ‚Ñö.*-mono ≥-<-pos {r = 1‚Ñö} tt (r .n<1) ‚ü©
    1‚Ñö ‚Ñö.* 1‚Ñö
  ‚âà‚ü® ‚Ñö.*-identityÀ° 1‚Ñö ‚ü©
    1‚Ñö
  ‚àé
  where open ‚Ñö.‚â§-Reasoning

1-_ : ‚Ñö‚ü®0,1‚ü© ‚Üí ‚Ñö‚ü®0,1‚ü©
(1- q) .num = 1‚Ñö ‚Ñö.- q .num
(1- q) .0<n =
  begin-strict
    0‚Ñö
  ‚âà‚ü® ‚Ñö.‚âÉ-sym (‚Ñö.+-inverse ≥ (q .num)) ‚ü©
    q .num ‚Ñö.- q .num
  <‚ü® ‚Ñö.+-monoÀ°-< (‚Ñö.- q .num) (q .n<1) ‚ü©
    1‚Ñö ‚Ñö.- q .num
  ‚àé
  where open ‚Ñö.‚â§-Reasoning
(1- q) .n<1 =
  begin-strict
    1‚Ñö ‚Ñö.- q .num
  <‚ü® ‚Ñö.+-mono ≥-< 1‚Ñö (‚Ñö.neg-mono-< (q .0<n)) ‚ü©
    1‚Ñö ‚Ñö.- 0‚Ñö
  ‚âà‚ü® ‚Ñö.+-cong ≥ 1‚Ñö Œµ‚Åª¬π‚âàŒµ ‚ü©
    1‚Ñö ‚Ñö.+ 0‚Ñö
  ‚âà‚ü® ‚Ñö.+-identity ≥ 1‚Ñö ‚ü©
    1‚Ñö
  ‚àé
  where open ‚Ñö.‚â§-Reasoning
        open import Algebra.Properties.Group (‚Ñö.+-0-group)

module _ (X : MSpc) where

  data term : Set where
    Œ∑     : X .Carrier ‚Üí term
    split : term ‚Üí ‚Ñö‚ü®0,1‚ü© ‚Üí term ‚Üí term

  data within : term ‚Üí ‚Ñö‚Å∫ ‚Üí term ‚Üí Set where
    tm-wk    : ‚àÄ {s t Œµ‚ÇÅ Œµ‚ÇÇ} ‚Üí Œµ‚ÇÅ ‚Ñö‚Å∫.‚â§ Œµ‚ÇÇ ‚Üí within s Œµ‚ÇÅ t ‚Üí within s Œµ‚ÇÇ t
    tm-refl  : ‚àÄ {t Œµ} ‚Üí within t Œµ t
    tm-sym   : ‚àÄ {s t Œµ} ‚Üí within s Œµ t ‚Üí within t Œµ s
    tm-trans : ‚àÄ {s t u Œµ‚ÇÅ Œµ‚ÇÇ} ‚Üí within s Œµ‚ÇÅ t ‚Üí within t Œµ‚ÇÇ u ‚Üí within s (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ) u
    tm-arch  : ‚àÄ {s t Œµ} ‚Üí (‚àÄ Œ¥ ‚Üí within s (Œµ ‚Ñö‚Å∫.+ Œ¥) t) ‚Üí within s Œµ t
    tm-var   : ‚àÄ {x y Œµ} ‚Üí X .dist x y ‚Ñù·µò.‚â§ ‚Ñù·µò.rational+ Œµ ‚Üí within (Œ∑ x) Œµ (Œ∑ y)
    tm-idem  : ‚àÄ {t q Œµ} ‚Üí within (split t q t) Œµ t
    tm-assoc : ‚àÄ {s t u q‚ÇÅ q‚ÇÇ q‚ÇÅ' q‚ÇÇ' Œµ} ‚Üí
                 q‚ÇÅ' ‚âÉ (q‚ÇÅ * q‚ÇÇ) ‚Üí
                 ((1- (q‚ÇÅ * q‚ÇÇ)) * q‚ÇÇ') ‚âÉ (q‚ÇÅ * (1- q‚ÇÇ)) ‚Üí
                 within (split (split s q‚ÇÅ t) q‚ÇÇ u)
                        Œµ
                        (split s q‚ÇÅ' (split t q‚ÇÇ' u))
    tm-dist  : ‚àÄ {s‚ÇÅ s‚ÇÇ t‚ÇÅ t‚ÇÇ Œµ‚ÇÅ Œµ‚ÇÇ Œµ q} ‚Üí
                 within s‚ÇÅ Œµ‚ÇÅ t‚ÇÅ ‚Üí
                 within s‚ÇÇ Œµ‚ÇÇ t‚ÇÇ ‚Üí
                 -- this is what gives us the Kantorovich metric between them
                 Œµ ‚Ñö‚Å∫.‚âÉ Œµ‚ÇÅ ‚Ñö‚Å∫.* pos q ‚Ñö‚Å∫.+ Œµ‚ÇÇ ‚Ñö‚Å∫.* pos (1- q) ‚Üí
                 within (split s‚ÇÅ q s‚ÇÇ) Œµ (split t‚ÇÅ q t‚ÇÇ)
    -- FIXME: also add tm-comm ??? and tm-zero
    -- is the only difference between probability distributions and step functions commutativity?

  open ‚Ñù·µò

  -- a metric space!
  ùïã : MSpc
  ùïã .Carrier = term
  ùïã .dist s t = inf (Œ£[ Œµ ‚àà ‚Ñö‚Å∫ ] (within s Œµ t)) (Œª p ‚Üí rational+ (p .proj‚ÇÅ))
  ùïã .refl =
    ‚â§-trans
      (inf-greatest (Œª i ‚Üí inf-lower ((i .proj‚ÇÅ) , tm-refl)))
      (‚â§-reflexive (‚âÉ-sym (approx 0‚Ñù)))
  ùïã .sym = inf-greatest (Œª p ‚Üí inf-lower (p .proj‚ÇÅ , tm-sym (p .proj‚ÇÇ)))
  ùïã .triangle {s}{t}{u} =
    begin
      ùïã .dist s u
    ‚â§‚ü® inf-greatest (Œª { ((Œµ‚ÇÅ , s-t)  , (Œµ‚ÇÇ , t-u)) ‚Üí ‚â§-trans (inf-lower (Œµ‚ÇÅ ‚Ñö‚Å∫.+ Œµ‚ÇÇ , tm-trans s-t t-u)) (‚â§-reflexive (‚âÉ-sym (rational‚Å∫-+ Œµ‚ÇÅ Œµ‚ÇÇ))) }) ‚ü©
      inf ((Œ£[ Œµ ‚àà ‚Ñö‚Å∫ ] (within s Œµ t)) √ó (Œ£[ Œµ ‚àà ‚Ñö‚Å∫ ] (within t Œµ u))) (Œª p ‚Üí rational+ (p .proj‚ÇÅ .proj‚ÇÅ) + rational+ (p .proj‚ÇÇ .proj‚ÇÅ))
    ‚âà‚ü® inf-+ ‚ü©
      ùïã .dist s t + ùïã .dist t u
    ‚àé
    where open ‚â§-Reasoning

open _‚áí_

open ‚Ñù·µò

-- Messy!
unit : ‚àÄ {X} ‚Üí X ‚áí ùïã X
unit .fun x = Œ∑ x
unit {X} .non-expansive {a}{b} =
  ‚â§-trans
    (inf-greatest (Œª i ‚Üí inf-lower ((i .proj‚ÇÅ) , (tm-var (i .proj‚ÇÇ)))))
    (‚â§-reflexive (‚âÉ-sym (approx (dist X a b))))

{-
-- FIXME: join
join : ‚àÄ {X} ‚Üí ùïã (ùïã X) ‚áí ùïã X
join .fun = {!!}
join .non-expansive = {!!}
-}

-- FIXME: map

-- FIXME: monoidal

-- FIXME: completion distributes over ùïã

open import Data.Nat using (‚Ñï; zero; suc)
open import MetricSpace.Rationals

step-identity : ‚Ñï ‚Üí ‚Ñö ‚Üí ‚Ñö ‚Üí term ‚Ñöspc
step-identity ‚Ñï.zero q a = Œ∑ q
step-identity (suc n) q a =
  let a = ‚Ñö.¬Ω ‚Ñö.* a in
  split (step-identity n (q ‚Ñö.- a) a) ¬Ω (step-identity n (q ‚Ñö.+ a) a)
-- then start it with ¬Ω

-- _ = {!step-identity 3 ‚Ñö.¬Ω ‚Ñö.¬Ω!}

-- Then define 'uniform : ùíû (term ‚Ñöspc)' as a regular function


sum : term ‚Ñöspc ‚Üí ‚Ñöspc .Carrier
sum (Œ∑ x) = x
sum (split t‚ÇÅ q t‚ÇÇ) = q .num ‚Ñö.* sum t‚ÇÅ ‚Ñö.+ (1‚Ñö ‚Ñö.- q .num) ‚Ñö.* sum t‚ÇÇ

-- _ = {! sum (step-identity 5 ‚Ñö.¬Ω ‚Ñö.¬Ω) !}

-- and sum is non-expansive


sum-ne : ‚àÄ {Œµ s t} ‚Üí within ‚Ñöspc s Œµ t ‚Üí ‚Ñö.‚à£ sum s ‚Ñö.- sum t ‚à£ ‚Ñö.‚â§ ‚Ñö‚Å∫.fog Œµ
sum-ne (tm-wk x p) = {!!}
sum-ne tm-refl = {!!}
sum-ne (tm-sym p) = {!!}
sum-ne (tm-trans p p‚ÇÅ) = {!!}
sum-ne (tm-arch x) = {!!}
sum-ne (tm-var x) = {!!}
sum-ne tm-idem = {!!}
sum-ne (tm-assoc x x‚ÇÅ) = {!!}
sum-ne (tm-dist p p‚ÇÅ eq) = {!!}


{-
-- Integration is definable for any ùïã-algebra?
-}

  -- axioms:
  -- 1. split x 0 y ‚â°[ Œµ ] x -- get rid of this if q ‚àà ‚Ñö‚ü®0,1‚ü©
  -- 2. split x q x ‚â°[ Œµ ] x
  -- 3. split x q y ‚â°[ Œµ ] split y (1 - q) x -- could be removed if the focus is on step functions
  -- 4. split (split x q y) q' z ‚â°[ Œµ ] split x (q*q') (split y ((q - q*q')/(1 - q*q')) z)   -- as long as q, q' ‚àà (0,1)
  -- 5. x‚ÇÅ ‚â°[ Œµ ] x‚ÇÇ ‚Üí y‚ÇÅ ‚â°[ Œµ' ] y‚ÇÇ ‚Üí split x‚ÇÅ q y‚ÇÅ ‚â°[ Œµ*q + (1 - q)*Œµ' ] split x‚ÇÅ q y‚ÇÇ

  -- This should then give an MSpc with a map (split : ‚Ñö[0,1] ‚Üí term X √ó‚Çò term X ‚áí term X)

  -- Goal: to prove that there is a non-expansive function
  --
  --      sum : term ‚Ñùspc ‚Üí ‚Ñùspc    (or ‚Ñöspc? or any normed ‚Ñö-vector space?)
  --
  -- It should also be possible to create an identity element of `ùíû (term ‚Ñöspc)` (or ùíû (term ‚Ñùspc))
  --
  -- Then integration is ‚à´ : (‚Ñù ‚áí ‚Ñù) ‚Üí ‚Ñù = Œª f ‚Üí join (ùíû-map (sum ‚àò term-map f) identity)

  -- this ought to work for any normed ‚Ñö‚ü®0,1‚ü©-vector space that has been completed: anything that we can define 'sum' for.

    -- ùíû-map (term-map f) identity : ùíû (term ‚Ñùspc)
    -- ùíû-map (sum ‚àò term-map f) identity : ùíû ‚Ñùspc
    -- join (ùíû-map (sum ‚àò term-map f) identity) : ‚Ñùspc

  -- then any element of `ùíû (term X)` can be used for the "measure"

  -- ùí´ X = ùíû (term X)   -- monad of probability measures; need term and ùíû to distribute

  -- if ùíû and term are strong monads, then this is a higher order function ùí´ X ‚äó (X ‚ä∏ ùïç) ‚ä∏ ùïç
  -- where X is any metic space
  --   and ùïç is any normed ‚Ñö-vector space (or convex set??) that is complete

  -- for step functions:
  --   eval : term X ‚äó ‚Ñö‚ü®0,1‚ü© ‚áí X
  -- presuambly for step functions, the result of the integration needn't be a commutative module


  -- IDEA: what if we combine 'term' and the free œâCPO monad? do we
  -- get recursion + metric reasoning? Probably need some rules to
  -- combine the order with the metric. See the POPL paper by those
  -- people.
